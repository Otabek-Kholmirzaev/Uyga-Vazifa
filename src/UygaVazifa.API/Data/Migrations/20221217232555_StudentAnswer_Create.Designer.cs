// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UygaVazifa.API.Data;

#nullable disable

namespace UygaVazifa.API.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221217232555_StudentAnswer_Create")]
    partial class StudentAnswer_Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("23d87b67-68a6-498c-a242-2c69576c00d7"),
                            RoleId = new Guid("f61d882b-22b4-4588-8f73-b85c7eb319db")
                        },
                        new
                        {
                            UserId = new Guid("f73e4f1d-be15-4eab-a1ba-92747d075b54"),
                            RoleId = new Guid("d0e9c32c-cbcc-4712-abac-63322f206db1")
                        },
                        new
                        {
                            UserId = new Guid("12431733-4e80-439b-b5ff-86e1f8c6f77f"),
                            RoleId = new Guid("8c242ea4-e9a3-4cfb-b50d-79233f68c988")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HomeworkId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentAnswerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentAnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f33b569a-bf39-4ebd-a71c-ccdd495a24da"),
                            CreatedDate = new DateTime(2022, 12, 17, 23, 25, 54, 849, DateTimeKind.Utc).AddTicks(5950),
                            HomeworkId = new Guid("3bf8c683-c889-405d-b37d-0d198ac8bf7c"),
                            Text = "Ustoz IStringLocalizerdan foydalansam bo`ladimi?",
                            UserId = new Guid("12431733-4e80-439b-b5ff-86e1f8c6f77f")
                        },
                        new
                        {
                            Id = new Guid("1dac93a4-2cac-45c2-9d8a-c241b8ce5a37"),
                            CreatedDate = new DateTime(2022, 12, 17, 23, 27, 54, 849, DateTimeKind.Utc).AddTicks(5956),
                            HomeworkId = new Guid("3bf8c683-c889-405d-b37d-0d198ac8bf7c"),
                            ParentId = new Guid("f33b569a-bf39-4ebd-a71c-ccdd495a24da"),
                            Text = "Ha, albatta foydalanishing mumkin.",
                            UserId = new Guid("f73e4f1d-be15-4eab-a1ba-92747d075b54")
                        },
                        new
                        {
                            Id = new Guid("e8f4a63b-15c1-4d66-9405-d9273549c493"),
                            CreatedDate = new DateTime(2022, 12, 17, 23, 25, 54, 849, DateTimeKind.Utc).AddTicks(5970),
                            HomeworkId = new Guid("3bf8c683-c889-405d-b37d-0d198ac8bf7c"),
                            Text = "Noto`g`ri ishlangan.",
                            UserId = new Guid("12431733-4e80-439b-b5ff-86e1f8c6f77f")
                        },
                        new
                        {
                            Id = new Guid("309b1bcf-cb1d-425e-ab4e-bc16d00d3f7a"),
                            CreatedDate = new DateTime(2022, 12, 17, 23, 26, 14, 849, DateTimeKind.Utc).AddTicks(5974),
                            HomeworkId = new Guid("3bf8c683-c889-405d-b37d-0d198ac8bf7c"),
                            ParentId = new Guid("e8f4a63b-15c1-4d66-9405-d9273549c493"),
                            Text = "Nimasi noto`g`ri ishlangan ustoz?.",
                            UserId = new Guid("12431733-4e80-439b-b5ff-86e1f8c6f77f")
                        });
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssistantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssistantId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4282f6fc-3643-4da6-ad1c-22ea8f3a8cfe"),
                            Name = "Ilmhub .NET Bootcamp",
                            Status = 0,
                            TeacherId = new Guid("f73e4f1d-be15-4eab-a1ba-92747d075b54")
                        });
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Homework", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Files")
                        .HasColumnType("text[]");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("IssuerId");

                    b.ToTable("Homeworks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bf8c683-c889-405d-b37d-0d198ac8bf7c"),
                            CreatedDate = new DateTime(2022, 12, 17, 23, 25, 54, 849, DateTimeKind.Utc).AddTicks(5756),
                            EndDate = new DateTime(2022, 12, 19, 23, 25, 54, 849, DateTimeKind.Utc).AddTicks(5766),
                            GroupId = new Guid("4282f6fc-3643-4da6-ad1c-22ea8f3a8cfe"),
                            IssuerId = new Guid("f73e4f1d-be15-4eab-a1ba-92747d075b54"),
                            StartDate = new DateTime(2022, 12, 18, 23, 25, 54, 849, DateTimeKind.Utc).AddTicks(5760),
                            Status = 0,
                            Title = "Localizerdan foydalanib servislarni implement qiling."
                        },
                        new
                        {
                            Id = new Guid("f26b793b-74e4-4edc-aa7c-e86e0eb5854f"),
                            CreatedDate = new DateTime(2022, 12, 17, 23, 25, 54, 849, DateTimeKind.Utc).AddTicks(5773),
                            EndDate = new DateTime(2022, 12, 20, 23, 25, 54, 849, DateTimeKind.Utc).AddTicks(5774),
                            GroupId = new Guid("4282f6fc-3643-4da6-ad1c-22ea8f3a8cfe"),
                            IssuerId = new Guid("f73e4f1d-be15-4eab-a1ba-92747d075b54"),
                            StartDate = new DateTime(2022, 12, 19, 23, 25, 54, 849, DateTimeKind.Utc).AddTicks(5773),
                            Status = 0,
                            Title = "Custom exception middleware yozing."
                        });
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f61d882b-22b4-4588-8f73-b85c7eb319db"),
                            ConcurrencyStamp = "f61d882b-22b4-4588-8f73-b85c7eb319db",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d0e9c32c-cbcc-4712-abac-63322f206db1"),
                            ConcurrencyStamp = "d0e9c32c-cbcc-4712-abac-63322f206db1",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("8c242ea4-e9a3-4cfb-b50d-79233f68c988"),
                            ConcurrencyStamp = "8c242ea4-e9a3-4cfb-b50d-79233f68c988",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.StudentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Files")
                        .HasColumnType("text[]");

                    b.Property<Guid?>("HomeworkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Result")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23d87b67-68a6-498c-a242-2c69576c00d7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f34e3eef-a943-4ec6-a102-65026773b454",
                            Email = "johndoe@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJzWgegb4rkOaL71t0QL5FhKQ8tDuNUk/7JbJofEtRNz65cIRlXJzf75hwmiHdlKeA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("f73e4f1d-be15-4eab-a1ba-92747d075b54"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3ab13bb-c1c2-4ffa-be37-750c923615e1",
                            Email = "annasmith@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNASMITH@GMAIL.COM",
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAEAACcQAAAAEAjop/axWIW+bVb45er5KMO2E4Xxdru+o3tJgTpR3apoCBOYatTokiUhHH4P4ALjBQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("12431733-4e80-439b-b5ff-86e1f8c6f77f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edbcd6ac-cb0d-4e05-9452-97dfdfc0e275",
                            Email = "jeffreyway@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jeffrey",
                            LastName = "Way",
                            LockoutEnabled = false,
                            NormalizedEmail = "JEFFREYWAY@GMAIL.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEI2eZGk4zNKqvLv7kQCIACNL1TMdxD6m4cRSze/X2MM/HK/abQYFyXHKExd8MFmsvA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "student"
                        });
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8348fe88-ad5c-4a4e-b88a-adb6f8e728e8"),
                            GroupId = new Guid("4282f6fc-3643-4da6-ad1c-22ea8f3a8cfe"),
                            UserId = new Guid("12431733-4e80-439b-b5ff-86e1f8c6f77f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UygaVazifa.API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Comment", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.Homework", "Homework")
                        .WithMany()
                        .HasForeignKey("HomeworkId");

                    b.HasOne("UygaVazifa.API.Entities.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("UygaVazifa.API.Entities.StudentAnswer", null)
                        .WithMany("ResultComments")
                        .HasForeignKey("StudentAnswerId");

                    b.HasOne("UygaVazifa.API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Group", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.User", "Assistant")
                        .WithMany()
                        .HasForeignKey("AssistantId");

                    b.HasOne("UygaVazifa.API.Entities.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistant");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Homework", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.Group", "Group")
                        .WithMany("Homeworks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UygaVazifa.API.Entities.User", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.StudentAnswer", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("UygaVazifa.API.Entities.Homework", null)
                        .WithMany("StudentAnswers")
                        .HasForeignKey("HomeworkId");

                    b.HasOne("UygaVazifa.API.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.UserGroup", b =>
                {
                    b.HasOne("UygaVazifa.API.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UygaVazifa.API.Entities.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Comment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Group", b =>
                {
                    b.Navigation("Homeworks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.Homework", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.StudentAnswer", b =>
                {
                    b.Navigation("ResultComments");
                });

            modelBuilder.Entity("UygaVazifa.API.Entities.User", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
